{
  "ngDeps": {
    "1": "",
    "3": [
      {
        "1": "package:angular2/bootstrap_static.dart",
        "5": false
      },
      {
        "1": "package:angular2/angular2.dart",
        "5": false
      },
      {
        "1": "package:ng2_dragula/dragula.dart",
        "5": false
      },
      {
        "1": "dart:html",
        "5": false
      },
      {
        "1": "dart:async",
        "5": false
      }
    ],
    "5": [
      {
        "1": "App",
        "4": [
          {
            "1": "Component",
            "3": [
              {
                "1": "selector",
                "2": "'app'"
              },
              {
                "1": "styleUrls",
                "2": "const ['app.css']"
              },
              {
                "1": "templateUrl",
                "2": "'app.html'"
              },
              {
                "1": "directives",
                "2": "const [Dragula]"
              }
            ],
            "4": false,
            "5": true,
            "6": true,
            "7": true,
            "8": false
          }
        ],
        "8": [
          {
            "2": "Dragula"
          }
        ]
      }
    ],
    "6": "main.dart"
  },
  "App": {
    "kind": "type",
    "value": {
      "isComponent": true,
      "dynamicLoadable": true,
      "selector": "app",
      "exportAs": null,
      "type": {
        "name": "App",
        "moduleUrl": "asset:ng2_dragula/web/main.dart",
        "isHost": false
      },
      "changeDetection": 5,
      "inputs": {},
      "outputs": {},
      "hostListeners": {},
      "hostProperties": {},
      "hostAttributes": {},
      "lifecycleHooks": [],
      "template": {
        "encapsulation": 0,
        "template": "<h1>\n  <a href='https://github.com/bevacqua/dragula'>\n    <img src='resources/logo.svg' onerror='this.src=\"resources/logo.png\"'\n         alt='dragula'/></a>\n</h1>\n<h3 class='tagline'>\n  <span class='tagline-text'>Drag and drop so simple it hurts\n    <br><br>Now also for Angular2 Dart!\n  </span>\n</h3>\n<div class='examples'>\n  <div class='parent'>\n    <label for='hy'>Move stuff between these two containers. Note how the stuff gets inserted near the mouse pointer?\n      Great stuff.</label>\n    <dragula class=\"wrapper\">\n      <div id='left-defaults' class='container'>\n        <div>You can move these elements between these two containers</div>\n        <div>Moving them anywhere else isn't quite possible</div>\n        <div>Anything can be moved around. That includes images, <a href='https://github.com/bevacqua/dragula'>links</a>,\n          or any other nested elements.\n          <div class='image-thing'><img src='resources/icon.svg' onerror='this.src=\"resources/icon.png\"' alt='dragula'/>\n          </div>\n          <sub>(You can still click on links, as usual!)</sub>\n        </div>\n      </div>\n      <div id='right-defaults' class='container'>\n        <div>There's also the possibility of moving elements around in the same container, changing their position</div>\n        <div>This is the default use case. You only need to specify the containers you want to use</div>\n        <div>More interactive use cases lie ahead</div>\n        <div>Moving <code>&lt;input/&gt;</code> elements works just fine. You can still focus them, too. <input\n          placeholder='See?'/></div>\n        <div>Make sure to check out the <a href='https://github.com/bevacqua/dragula#readme'>documentation on\n          GitHub!</a></div>\n      </div>\n    </dragula>\n        <pre>\n          <code>\n&lt;dragula class=&quot;wrapper&quot;&gt;\n  &lt;div id='left' class='container'&gt;\n    ...\n  &lt;/div&gt;\n  &lt;div id='right' class='container'&gt;\n    ...\n  &lt;/div&gt;\n&lt;/dragula&gt;\n          </code>\n        </pre>\n  </div>\n  <div class='parent'>\n    <label for='hy'>There are plenty of events along the lifetime of a drag event. Check out <a\n      href='https://github.com/bevacqua/dragula#drakeon-events'>all of them</a> in the docs!</label>\n    <dragula [on-drop]=\"onDrop\" [on-drag]=\"onDrag\" [on-over]=\"onOver\" [on-out]=\"onOut\" class='wrapper'>\n      <div id='left-events' class='container'>\n        <div>As soon as you start dragging an element, a <code>drag</code> event is fired</div>\n        <div>Whenever an element is cloned because <code>copy: true</code>, a <code>cloned</code> event fires</div>\n        <div>The <code>shadow</code> event fires whenever the placeholder showing where an element would be dropped is\n          moved to a different container or position\n        </div>\n        <div>A <code>drop</code> event is fired whenever an element is dropped anywhere other than its origin <em>(where\n          it was initially dragged from)</em></div>\n      </div>\n      <div id='right-events' class='container'>\n        <div>If the element gets removed from the DOM as a result of dropping outside of any containers, a\n          <code>remove</code> event gets fired\n        </div>\n        <div>A <code>cancel</code> event is fired when an element would be dropped onto an invalid target, but retains\n          its original placement instead\n        </div>\n        <div>The <code>over</code> event fires when you drag something over a container, and <code>out</code> fires when\n          you drag it away from the container\n        </div>\n        <div>Lastly, a <code>dragend</code> event is fired whenever a drag operation ends, regardless of whether it ends\n          in a cancellation, removal, or drop\n        </div>\n      </div>\n    </dragula>\n        <pre>\n          <code>\n&lt;dragula [on-drop]=&quot;onDrop&quot; [on-drag]=&quot;onDrag&quot; [on-over]=&quot;onOver&quot; [on-out]=&quot;onOut&quot;&gt;\n  &lt;div id='left-events' class='container'&gt;\n    ...\n  &lt;/div&gt;\n  &lt;div id='right-events' class='container'&gt;\n    ...\n  &lt;/div&gt;\n&lt;/dragula&gt;\n          </code>\n        </pre>\n  </div>\n  <div class='parent'>\n    <label for='hy'>Need to be able to quickly delete stuff when it spills out of the chosen containers? Note how you\n      can easily sort the items in any containers by just dragging and dropping.</label>\n    <dragula [remove-on-spill]=\"true\" class='wrapper'>\n      <div id='left-rm-spill' class='container'>\n        <div>Anxious Cab Driver</div>\n        <div>Thriving Venture</div>\n        <div>Such <a href='http://ponyfoo.com'>a good blog</a></div>\n        <div>Calm Clam</div>\n      </div>\n      <div id='right-rm-spill' class='container'>\n        <div>Banana Boat</div>\n        <div>Orange Juice</div>\n        <div>Cuban Cigar</div>\n        <div>Terrible Comedian</div>\n      </div>\n    </dragula>\n        <pre>\n          <code>\n&lt;dragula [remove-on-spill]='true' class='wrapper'&gt;\n  &lt;div id='left' class='container'&gt;\n    ...\n  &lt;/div&gt;\n  &lt;div id='right' class='container'&gt;\n    ...\n  &lt;/div&gt;\n&lt;/dragula&gt;\n          </code>\n        </pre>\n  </div>\n  <div class='parent'>\n    <label for='hy'>By default, dropping an element outside of any known containers will keep the element in the last\n      place it went over. You can make elements go back to origin if they're dropped outside of known containers,\n      too.</label>\n    <dragula [revert-on-spill]='true' class='wrapper'>\n      <div id='left-rollbacks' class='container'>\n        <div>Moving items between containers works as usual</div>\n        <div>If you try to drop an item outside of any containers, though, it'll retain its original position</div>\n        <div>When that happens, a <code>cancel</code> event will be raised</div>\n      </div>\n      <div id='right-rollbacks' class='container'>\n        <div>Note that the dragged element will go back to the place you originally dragged it from, even if you move it\n          over other containers\n        </div>\n        <div>This is useful if you want to ensure drop events only happen when the user intends for them to happen\n          explicitly, avoiding surprises\n        </div>\n      </div>\n    </dragula>\n        <pre>\n          <code>\n&lt;dragula [revert-on-spill]='true' class='wrapper'&gt;\n  &lt;div id='left' class='container'&gt;\n    ...\n  &lt;/div&gt;\n  &lt;div id='right' class='container'&gt;\n    ...\n  &lt;/div&gt;\n&lt;/dragula&gt;\n          </code>\n        </pre>\n  </div>\n  <div class='parent'>\n    <label for='hy'>Copying stuff is common too, so we made it easy for you.</label>\n    <dragula [copy]=\"true\" class='wrapper'>\n      <div id='left-copy' class='container'>\n        <div>When elements are copyable, they can't be sorted in their origin container</div>\n        <div>Copying prevents original elements from being dragged. A copy gets created and <em>that</em> gets dragged\n          instead\n        </div>\n        <div>Whenever that happens, a <code>cloned</code> event is raised</div>\n      </div>\n      <div id='right-copy' class='container'>\n        <div>Note that the clones get destroyed if they're not dropped into another container</div>\n        <div>You'll be dragging a copy, so when they're dropped into another container you'll see the duplication.</div>\n      </div>\n    </dragula>\n        <pre>\n          <code>\n&lt;dragula [copy]=&quot;true&quot;  class='wrapper'&gt;\n  &lt;div id='left-copy' class='container'&gt;\n    ...\n  &lt;/div&gt;\n  &lt;div id='right-copy' class='container'&gt;\n    ...\n  &lt;/div&gt;\n&lt;/dragula&gt;\n          </code>\n        </pre>\n  </div>\n  <div class='parent'>\n    <label for='hy'>Copying stuff from only one of the containers and sorting on the other one? No problem!</label>\n    <dragula [copy]=\"copy\" [accepts]=\"accepts\" class='wrapper'>\n      <div id='left-copy-1tomany' class='container'>\n        <div>When elements are copyable, they can't be sorted in their origin container</div>\n        <div>Copying prevents original elements from being dragged. A copy gets created and <em>that</em> gets dragged instead</div>\n        <div>Whenever that happens, a <code>cloned</code> event is raised</div>\n        <div>Note that the clones get destroyed if they're not dropped into another container</div>\n        <div>You'll be dragging a copy, so when they're dropped into another container you'll see the duplication.</div>\n      </div>\n      <div id='right-copy-1tomany' class='container'>\n      </div>\n    </dragula>\n\n        <pre>\n          <code>\n&lt;dragula  [copy]=&quot;copy&quot; [accepts]=&quot;accepts&quot; class='wrapper'&gt;\n  &lt;div id='left-copy-1tomany' class='container'&gt;\n    ...\n  &lt;/div&gt;\n  &lt;div id='right-copy-1tomany' class='container'&gt;\n    ...\n  &lt;/div&gt;\n&lt;/dragula&gt;\n\n...\n\nCopy copy = (Element el, Element source) =>\n    source == querySelector('#left-copy-1tomany');\n\nAccepts accepts = (Element el, Element target, Element source, Element sibling) =\n    target != querySelector('#left-copy-1tomany');\n          </code>\n        </pre>\n  </div>\n  <div class='parent'>\n    <label for='hy'>Drag handles float your cruise?</label>\n    <dragula [moves]=\"moves\" class='wrapper'>\n      <div id='left-lovehandles' class='container'>\n        <div><span class='handle'>+</span>Move me, but you can use the plus sign to drag me around.</div>\n        <div><span class='handle'>+</span>Note that <code>handle</code> element in the <code>moves</code> handler is\n          just the original event target.\n        </div>\n      </div>\n      <div id='right-lovehandles' class='container'>\n        <div><span class='handle'>+</span>This might also be useful if you want multiple children of an element to be\n          able to trigger a drag event.\n        </div>\n        <div><span class='handle'>+</span>You can also use the <code>moves</code> option to determine whether an element\n          can be dragged at all from a container, <em>drag handle or not</em>.\n        </div>\n      </div>\n    </dragula>\n        <pre>\n          <code>\n&lt;dragula [moves]=&quot;moves&quot; class='wrapper'&gt;\n  &lt;div id='left-lovehandles' class='container'&gt;\n    ...\n  &lt;/div&gt;\n  &lt;div id='right-lovehandles' class='container'&gt;\n    ...\n  &lt;/div&gt;\n&lt;/dragula&gt;\n            ...\nMoves moves = (el, container, handle, sibling) => handle.className == 'handle';\n          </code>\n        </pre>\n    <div>There are a few similar mechanisms to determine whether an element can be dragged from a certain container <a\n      href='https://github.com/bevacqua/dragula#optionsmoves'>(<code>moves</code>)</a>, whether an element can be\n      dropped into a certain container at a certain position <a\n        href='https://github.com/bevacqua/dragula#optionsaccepts'>(<code>accepts</code>)</a>, and whether an element is\n      able to originate a drag event <a href='https://github.com/bevacqua/dragula#optionsinvalid'>(<code>invalid</code>)</a>.\n    </div>\n  </div>\n  <div class='parent'>\n    <label><strong>Click or Drag!</strong> Fires a click when the mouse button is released before a\n      <code>mousemove</code> event, otherwise a drag event is fired. No extra configuration is necessary.</label>\n    <dragula class='wrapper'>\n      <div #sortable id='sortable' class='container' (click)=\"onClick($event, sortable)\">\n        <div>Clicking on these elements triggers a regular <code>click</code> event you can listen to.</div>\n        <div>Try dragging or clicking on this element.</div>\n        <div>Note how you can click normally?</div>\n        <div>Drags don't trigger click events.</div>\n        <div>Clicks don't end up in a drag, either.</div>\n        <div>This is useful if you have elements that can be both clicked or dragged.</div>\n      </div>\n    </dragula>\n        <pre>\n          <code>\n&lt;dragula class='wrapper'&gt;\n  &lt;div id='sortable' class='container'&gt;\n    ...\n  &lt;/div&gt;\n&lt;/dragula&gt;\n          </code>\n        </pre>\n  </div>\n</div>\n<h3 class='promo'>Who couldn't love a pun that good? &mdash; <a href='http://thenextweb.com/dd/2015/07/20/less-of-a-drag-maaaaaaaan'>The Next Web</a></h3>\n<h3>Get it on GitHub! <a href='https://github.com/bevacqua/dragula'>bevacqua/dragula</a></h3>",
        "templateUrl": "asset:ng2_dragula/web/app.html",
        "styles": [],
        "styleUrls": [
          "asset:ng2_dragula/web/app.css"
        ],
        "ngContentSelectors": []
      }
    }
  }
}